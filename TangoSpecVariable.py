#!/usr/bin/env python
#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        TangoSpecVariable.py
#
# description : Python source for the TangoSpecVariable and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                TangoSpecVariable are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys

import time
import string
import math
import thread
import numpy
import json

from SpecClient.SpecVariable import *
from SpecClient.SpecVariable import *
from SpecClient.SpecClientError import SpecClientError
from SpecClient import SpecEventsDispatcher
from SpecClient import SpecConnectionsManager

from array import array

#------------------------------------------------------------------
#    _SpecVariableA class
#------------------------------------------------------------------
class _SpecVariableA (SpecVariableA):

    def __init__(self,tango_spec_var,var,spec):
        #print "_SpecMotorA.__init__() called"
        #print "tango_spec_motor : ",tango_spec_motor
        self.tango_spec_var = tango_spec_var
        self.spec = spec
        self.var = var
        self.position = 0
        self.inited = 0
        self.spec_connected = 0
        SpecVariableA.__init__(self)
        #print "_SpecMotorA.__init__() exiting"

    def connected(self):
        #print "connected"
        self.spec_connected = 1

    def disconnected(self):
        #print "disconnected"
        self.spec_connected = 0

    def update(self, _value):
        #print "position changed, new position = ", _position
        self.spec_connected = 1
        self.value = _value
        self.tango_spec_var.update()

    def connect(self):
        print "connect to variable ",self.var, " spec ",self.spec
        SpecVariableA.connectToSpec(self, self.var, self.spec)
#==================================================================
#   TangoSpecVariable Class Description:
#
#         A class to implement a SpecVariable as a Tango device. Spec will be accessed
#         via spec server usingg the SpecClient.
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :
#   DevState.MOVING :
#   DevState.FAULT :
#==================================================================


class TangoSpecVariable(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        TangoSpecVariable.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.info_stream("In ::init_device()")
        self.specclient_mngr = SpecConnectionsManager.SpecConnectionsManager(pollingThread=False)
        self.inited = 0
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        self.spec = self.device_property_list['Spec'][2]
        print "property[spec] = " , self.spec
        self.var = self.device_property_list['Variable'][2]
        print "property[variable] = " , self.var
        #
        # Create a synchronous spec access to get the data
        #       
        try:
            self.spec_var_a = _SpecVariableA(self,self.var, self.spec)
            self.spec_connected = 1

        except SpecClientError, error:
            self.spec_connected = 0
            print "Spec error : ", self.var, self.spec, error

        #SpecEventsDispatcher.dispatch()
        self.set_change_event("State", True, False)
        self.set_change_event("Status", True, False)
#        self.set_change_event("DoubleValue", True, False)
#        self.set_change_event("DoubleArray", True, False)
#        self.set_change_event("DoubleAssociativeArray", True, False)
#        self.set_change_event("StringValue", True, False)
#        self.set_change_event("StringArray", True, False)
#        self.set_change_event("StringAssociativeArray", True, False)
        print self.get_name(), "::init_device() exiting"


#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        if self.inited == 0:
            self.spec_var_a.connect()
            self.inited = 1
        #print "In ", self.get_name(), "::always_excuted_hook()"
        if self.spec_var_a.isSpecConnected() == 0:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Variable in FAULT state because SPEC disconnected (hint: start the SPEC session)")
        else:
            self.set_state(PyTango.DevState.ON)
            self.set_status("Variable in ON")



#==================================================================
#
#    TangoSpecVariable read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        #print "In ", self.get_name(), "::read_attr_hardware()"
        dummy = 0


    def update(self):
        self.info_stream( "push variable changed event %s " % str(self.spec_var_a.value))
        self.value = self.spec_var_a.value
        self.push_change_event("StringValue", str(self.value))

#------------------------------------------------------------------
#    Read JSON attribute
#------------------------------------------------------------------
    def read_Json(self, attr):
        #print "In ", self.get_name(), "::read_StringValue()"
        
        #    Add your own code here
        
        self.value = self.spec_var_a.getValue()
        attr.set_value(json.dumps(self.value))


#------------------------------------------------------------------
#    Write StringValue attribute
#------------------------------------------------------------------
    def write_Json(self, attr):
        #print "In ", self.get_name(), "::write_StringValue()"
        
        #    Add your own code here
        
        #data=[]
        self.data_json = attr.get_write_value()
        self.info_stream("data = %s"% str(self.data_json))
        self.data = json.loads(self.data_json)
        self.info_stream("data = %s"% str(self.data))
        self.spec_var_a.setValue(self.data)
        
#==================================================================
#
#    TangoSpecVariable command methods
#
#==================================================================

#------------------------------------------------------------------
#       SpecClientPoll command:
#
#       Description: 
#       argin:  DevVoid
#       argout: DevVoid
#------------------------------------------------------------------
    def SpecClientPoll(self):
        #self.info_stream( "specclient_poll() ")
        self.specclient_mngr.poll()



#==================================================================
#
#    TangoSpecVariableClass class definition
#
#==================================================================
class TangoSpecVariableClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Spec':
            [PyTango.DevString,
            "Name of spec session e.g. host:spec",
            [ "lid112:andy" ] ],
        'Variable':
            [PyTango.DevString,
            "Spec mnemonic for variable",
            [ "mon" ] ],
        }


    #    Command definitions
    cmd_list = {
        'SpecClientPoll':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
            # specifying the polling period in the source needs
            # recent version of the mysql database (>5)
            # for now configure the polling for one of the
            # devices in the server ... andy 19jun2012
            #[PyTango.DevVoid, ""],{'Polling period':50}],
            }


    #    Attribute definitions
    attr_list = {
        'Json':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }

#------------------------------------------------------------------
#    _SpecEventDispatcherThread function
#------------------------------------------------------------------
    def _spec_event_dispatcher_thread(self):
        print 'Start _SpecEventDispatcherThread()'
        if SpecConnectionsManager._SpecConnectionsManagerInstance == None:
            print "_spec_event_dispatcher_thread(): create SpecConnectionsManager"
            spec_mngr = SpecConnectionsManager.SpecConnectionsManager(pollingThread=False)
            while True:
                SpecConnectionsManager._SpecConnectionsManagerInstance.poll()
                #SpecEventsDispatcher.dispatch()
                time.sleep(.1)
            
#------------------------------------------------------------------
#    TangoSpecVariableClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In TangoSpecVariableClass  constructor"
        # do not create thread - assume polling is done in TangoSpecVariable class
        #thread_args= self,
        #thread.start_new_thread(TangoSpecVariableClass._spec_event_dispatcher_thread,thread_args)
        
#==================================================================
#
#    TangoSpecVariable class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(TangoSpecVariableClass,TangoSpecVariable,'TangoSpecVariable')

        U = PyTango.Util.instance()
        U.set_serial_model(PyTango.SerialModel.BY_PROCESS) # to limit to one thread
        U.server_init()
        #
        # DO NOT start SpecConnection polling thread to avoid the SpecConnectionsManager from polling "a fond la caisse"
        # assume polling is done via SpecPoll command which has to be configured for one device ONLY

        #thread_args = ()
        #thread.start_new_thread(_spec_event_dispatcher_thread, thread_args)
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
