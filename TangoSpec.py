#!/usr/bin/env python
#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        TangoSpec.py
#
# description : Python source for the TangoSpec and its commands. This is
#                based on the SpecClient interface:
#                http://ftp.esrf.eu/pub/bliss/SpecClient%20user%27s%20guide.pdf
#
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                TangoSpec are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  Andy Gotz$
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys

import sys
import time
import string
import math
import thread
import numpy
import json

from SpecClient import Spec
from SpecClient.SpecVariable import *
from SpecClient.SpecCommand import *
from SpecClient.SpecClientError import SpecClientError
from SpecClient import SpecEventsDispatcher

import TangoSpecMotor
from TangoSpecMotor import *

def display_spec_output(output):
    print output

class _SpecVariableA (SpecVariableA):
    """ A class to implement reading and writing a spec variable. 
        Derived from SpecVariableA
    """

    def __init__(self,tango_spec,var,spec):
        self.tango_spec = tango_spec
        self.spec = spec
        self.var = var
        self.position = 0
        self.inited = 0
        self.spec_connected = 0
        SpecVariableA.__init__(self)
        SpecVariableA.connectToSpec(self, self.var, self.spec)

    def connected(self):
        #print "connected"
        self.spec_connected = 1

    def disconnected(self):
        #print "disconnected"
        self.spec_connected = 0

    def update(self, _value):
        self.spec_connected = 1
        self.value = _value
        #self.tango_spec.update()

    def connect(self):
        print "connect to variable ",self.var, " spec ",self.spec
        SpecVariableA.connectToSpec(self, self.var, self.spec)
        
class _SpecCommandA (SpecCommandA):
    """A class to implement executing a spec command asynchronously
        Derived from SpecCommandA
    """

    def __init__(self,tango_spec,args,spec):
        self.tango_spec = tango_spec
        self.spec = spec
        self.cmd = args[0]
        self.pars = ""
        ipar = 0
        for par in args[1:] :
            if ipar == 0:
                self.pars = par
            else:
                self.pars = "%s,%s" % (self.pars, par)
            ipar = ipar+1
        self.inited = 0
        self.spec_connected = 0
        self.spec_command = SpecCommandA.SpecCommandA(self.cmd, self.spec)
        # TODO: when to execute the command?
        #spec_cmd = "self.spec_command(%s)"%self.pars
        #print "spec_cmd = ", spec_cmd
        #argout = eval(spec_cmd)


    def connected(self):
        #print "connected"
        self.spec_connected = 1

    def disconnected(self):
        #print "disconnected"
        self.spec_connected = 0

    def replyArrived(self, _reply):
        #print "position changed, new position = ", _position
        self.spec_connected = 1
        self.reply = _reply
        self.tango_spec.set_state(PyTango.DevState.ON)

    def connect(self):
        print "connect to cmd ",self.var, " spec ",self.spec
        SpecCommandA.connectToSpec(self, self.spec)
#==================================================================
#   TangoSpec Class Description:
#
#         A TANGO device server for SPEC based on SpecClient.
#
#==================================================================

class TangoSpec(PyTango.Device_4Impl):
    """A Tango Device class to talk to SPEC
    """

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        TangoSpec.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()



    def update_output(self, output):
        #self.info_stream( "push output changed event %s " % output)
        self.push_change_event("Output", output)

        
#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self._init = 1
        self.specclient_mngr = SpecConnectionsManager.SpecConnectionsManager(pollingThread=False)
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        self.spec = self.device_property_list['Spec'][2]
        print "property[spec] = " , self.spec
        self.spec_output = "none"
        #
        # Create a synchronous spec access to get the data
        #       
        try:
            self.spec_spec = Spec.Spec(self.spec, timeout=1000)
            self.spec_motors = self.spec_spec.getMotorsMne()
            self.spec_tty = SpecVariableA("output/tty", self.spec, dispatchMode=SpecEventsDispatcher.FIREEVENT, prefix=False, callbacks={"update": self.update_output})
        except SpecClientError, error:
            print "Spec error : ", self.spec, error

        spec_session = self.spec.split(":")[1]
        print "spec session ",spec_session
        if len(self.device_property_list["Motors"][2]) > 0:
            motor_mne = self.device_property_list["Motors"][2][0]
            print "motor_mne ",motor_mne
            motor_name = "motor/%s/%s" % (spec_session , motor_mne)
            print "motor_name ",motor_name
        self.__variables = {}
        if len(self.device_property_list["Variables"][2]) > 0:
            for variable_name in self.device_property_list["Variables"][2]:
                #variable_name = self.device_property_list["Variables"][2][0]
                print "found variable_name " ,variable_name, "in database, create dynamic attribute"
                self.AddVariable(variable_name)
        self.set_change_event("Output", True, False)
        #db = PyTango.Database()
        #db.delete_device(motor_name)
        #dev_info = PyTango.DbDevInfo()
        #dev_info.name = motor_name
        #dev_info._class = 'TangoSpecMotor'
        #dev_info.server = 'TangoSpec/andy'
        #db.add_device(dev_info)
        #util = PyTango.Util.instance()
        #print "util.create_device() calling"
        #util.create_device("TangoSpecMotor", motor_name, alias=None, cb=None)
        #print "Out ", self.get_name(), "::init_device()"
        self._init = 0


#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        #print "In ", self.get_name(), "::always_excuted_hook()"
        dummy = 0

#==================================================================
#
#    TangoSpec read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        #print "In ", self.get_name(), "::read_attr_hardware()"
        _dummy = 0



#------------------------------------------------------------------
#    Read Motors attribute
#------------------------------------------------------------------
    def read_Motors(self, attr):
        print "In ", self.get_name(), "::read_Motors()"
        
        #    Add your own code here
        
        #attr_Motors_read = ["Hello Tango world"]
        attr.set_value(self.spec_motors, len(self.spec_motors))



#------------------------------------------------------------------
#    Read Spec Output attribute
#------------------------------------------------------------------
    def read_Output(self, attr):
        #print "In ", self.get_name(), "::read_Output()"
        
        #    Add your own code here
        
        #attr_Motors_read = ["Hello Tango world"]
        attr.set_value("")

#------------------------------------------------------------------
#    Read Variable attribute
#------------------------------------------------------------------
    def read_Variable(self, attr):
        self.info_stream("In %s::read_Variable() "% self.get_name())
        
        #    Add your own code here
        
        self.debug_stream("attr.get_name() %s"% attr.get_name())
        _value = self.__variables[attr.get_name()].getValue()
        self.debug_stream("_value %s"% _value)
        attr.set_value(json.dumps(_value))


#------------------------------------------------------------------
#    Write Variable attribute
#------------------------------------------------------------------
    def write_Variable(self, attr):
        self.info_stream("In %s::write_Variable() "% self.get_name())
        
        #    Add your own code here
        
        #data=[]
        _json = attr.get_write_value()
        self.info_stream("data = %s"% str(_json))
        _value = json.loads(_json)
        self.info_stream("data = %s"% str(_value))
        self.__variables[attr.get_name()].setValue(_value)

#==================================================================
#
#    TangoSpec command methods
#
#==================================================================

#------------------------------------------------------------------
#    ExecuteCmd command:
#
#    Description: execute a spec command using the Spec object
#    argin:  DevVarStringArray    
#    argout: DevString    
#------------------------------------------------------------------
    def ExecuteCmd(self, argin):
        self.info_stream("In %s::ExecuteCmd() "% self.get_name())
        #print "In ", self.get_name(), "::ExecuteCmd()",argin
        #    Add your own code here
        try:
            for cmd in argin:
                spec_cmd = "self.spec_spec.%s" % cmd
                argout = eval(spec_cmd)
                #print "argout = ",argout
        except SpecClientError, error:
            self.error_stream("Spec %s error : %s"%(self.spec, error))

        return "argout"

#------------------------------------------------------------------
#    SpecCommand command:
#
#    Description: execute a spec command using the SpecCommand object
#    argin:  DevVarStringArray    
#    argout: DevString    
#------------------------------------------------------------------
    def SpecCommand(self, argin):
        self.info_stream("In %s::SpecCommand() "% self.get_name())
        print "In ", self.get_name(), "::SpecCommand()",argin
        #    Add your own code here
        try:
            argout = ""
            spec_command = SpecCommand.SpecCommand(argin[0], self.spec)
            spec_pars = ""
            ipar = 0
            for par in argin[1:] :
                if ipar == 0:
                    spec_pars = par
                else:
                    spec_pars = "%s,%s" % (spec_pars, par)
                ipar = ipar+1
            spec_cmd = "spec_command(%s)"%spec_pars
            print "spec_cmd = ", spec_cmd
            argout = eval(spec_cmd)
        except SpecClientError, error:
            self.error_stream("Spec %s error : %s"%(self.spec, error))
        #print "argout = ",argout
        return argout
    
#------------------------------------------------------------------
#    SpecCommand command:
#
#    Description: execute a spec command asynchronously using the SpecCommandA object
#    argin:  DevVarStringArray    
#    argout: DevString    
#------------------------------------------------------------------
    def SpecCommandA(self, argin):
        self.info_stream("In %s::SpecCommandA() "% self.get_name())
        #    Add your own code here
        try:
            argout = ""
            spec_command = _SpecCommandA(argin, self.spec)
        except SpecClientError, error:
            self.error_stream("Spec %s error : %s"%(self.spec, error))
        #print "argout = ",argout
        return argout
    
#------------------------------------------------------------------
#    AddVariable command:
#
#    Description: 
#    argin:  DevVarStringArray    
#    argout: DevString    
#------------------------------------------------------------------
    def AddVariable(self, argin):
        self.info_stream("In %s::AddVariable() "% self.get_name())
        #print "In ", self.get_name(), "::AddVariable()",argin
        #    Add your own code here

        _variable = argin
        if self._init != 1:
            if _variable in self.Variables:
                raise Exception("Variable is already defined as an attribute!")
        try:
            self.__variables[_variable] = _SpecVariableA(self,_variable, self.spec)
        except SpecClientError, error:
            self.error_stream("Spec %s error : %s"%(self.spec, error))
        _attr = PyTango.Attr(_variable,PyTango.DevString,PyTango.READ_WRITE)
        self.add_attribute(_attr, self.read_Variable, self.write_Variable)
        if self._init != 1:
            self.Variables.append(_variable)
        U = PyTango.Util.instance()
        db = U.get_database()
        db.put_device_property(self.get_name(), {"Variables": self.Variables})


    def SpecClientPoll(self):
        self.specclient_mngr.poll()

#==================================================================
#
#    TangoSpecClass class definition
#
#==================================================================
class TangoSpecClass(PyTango.DeviceClass):
    """A Tango Device class class to talk to SPEC
    """

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Spec':
            [PyTango.DevString,
            "Spec session e.g. localhost:spec",
            [ "localhost:spec" ] ],
        'Motors':
            [PyTango.DevVarStringArray,
            "List of spec motors to create e.g. tth, energy, phi",
            [] ],
        'Variables':
            [PyTango.DevVarStringArray,
            "List of SPEC variables to create e.g. myvar, mayarr, A",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'ExecuteCmd':
            [[PyTango.DevVarStringArray, ""],
            [PyTango.DevString, ""]],
        'SpecCommand':
            [[PyTango.DevVarStringArray, ""],
            [PyTango.DevString, ""]],
        'SpecCommandA':
            [[PyTango.DevVarStringArray, ""],
            [PyTango.DevVoid, ""]],
        'SpecClientPoll':
             [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""], {'Polling period':20}],
        'AddVariable':
            [[PyTango.DevString, ""],
            [PyTango.DevVoid, ""]],
         }


    #    Attribute definitions
    attr_list = {
        'Motors':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 512]],
        'Counters':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 512]],
        'Output':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


#------------------------------------------------------------------
#    TangoSpec Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In TangoSpecClass  constructor"


#==================================================================
#
#    TangoSpec class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        # TODO uncomment this line if you want to support TangoSpecMotors in the same server
        #py.add_TgClass(TangoSpecMotorClass,TangoSpecMotor,'TangoSpecMotor')
        py.add_TgClass(TangoSpecClass,TangoSpec,'TangoSpec')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
