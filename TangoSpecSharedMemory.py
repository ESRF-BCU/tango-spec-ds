#!/usr/bin/env python
#	"$Name:  $";
#	"$Header:  $";
#=============================================================================
#
# file :        TangoSpecSharedMemory.py
#
# description : Python source for the TangoSpecSharedMemory and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                TangoSpecSharedMemory are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import sps
import numpy


#==================================================================
#   TangoSpecSharedMemory Class Description:
#
#         A TANGO device server for SPEC shared memory based on SPS
#
#==================================================================


class TangoSpecSharedMemory(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#	Device constructor
#------------------------------------------------------------------
	def __init__(self,cl, name):
		PyTango.Device_4Impl.__init__(self,cl,name)
		TangoSpecSharedMemory.init_device(self)

#------------------------------------------------------------------
#	Device destructor
#------------------------------------------------------------------
	def delete_device(self):
		print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#	Device initialization
#------------------------------------------------------------------
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.ON)
		self.get_device_properties(self.get_device_class())

#------------------------------------------------------------------
#	Always excuted hook method
#------------------------------------------------------------------
	def always_executed_hook(self):
		print "In ", self.get_name(), "::always_excuted_hook()"

#==================================================================
#
#	TangoSpecSharedMemory read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#	Read Attribute Hardware
#------------------------------------------------------------------
	def read_attr_hardware(self,data):
		print "In ", self.get_name(), "::read_attr_hardware()"




#==================================================================
#
#	TangoSpecSharedMemory command methods
#
#==================================================================

#------------------------------------------------------------------
#	GetLongArray command:
#
#	Description: 
#	argin:  DevVarStringArray	"spec","array" e.g. "andy","longarray"
#	argout: DevVarLongArray	array of longs
#------------------------------------------------------------------
	def GetLongArray(self, argin):
		print "In ", self.get_name(), "::GetLongArray()"
		#	Add your own code here
		_spec = argin[0]
		_array = argin[1]
		self.info_stream("get long array for spec session = %s , array = %s" % (_spec,_array))  
		_long_array = sps.getdata(_spec,_array)
		_shape = _long_array.shape
		#print _shape
		self.info_stream("shape of array rows = %s , cols = %s" % (_shape[0],_shape[1]))  
		_long_array.shape = _shape[0]*_shape[1]
		#print "long array = ",_long_array
		return _long_array

#------------------------------------------------------------------
#	GetDoubleArray command:
#
#	Description: 
#	argin:  DevVarStringArray	"spec","array" e.g. "andy","longarray"
#	argout: DevVarDoubleArray	array of doubles
#------------------------------------------------------------------
	def GetDoubleArray(self, argin):
		print "In ", self.get_name(), "::GetDOubleArray()"
		#	Add your own code here
		_spec = argin[0]
		_array = argin[1]
		self.info_stream("get long array for spec session = %s , array = %s" % (_spec,_array))  
		_double_array = sps.getdata(_spec,_array)
		_shape = _double_array.shape
		#print _shape
		self.info_stream("shape of array rows = %s , cols = %s" % (_shape[0],_shape[1]))  
		_double_array.shape = _shape[0]*_shape[1]
		return _double_array

#------------------------------------------------------------------
#	GetLongRow command:
#
#	Description: 
#	argin:  DevVarStringArray	"spec","array" e.g. "andy","longarray"
#	argout: DevVarLongArray	array of long
#------------------------------------------------------------------
	def GetLongRow(self, argin):
		print "In ", self.get_name(), "::GetLongRow()"
		#	Add your own code here
		_spec = argin[0]
		_array = argin[1]
		_row = int(argin[2])
		self.info_stream("get double row for spec session = %s , array = %s" % (_spec,_array))  
		_long_row = sps.getdatarow(_spec,_array,_row)
		return _long_row

#------------------------------------------------------------------
#	GetDoubleRow command:
#
#	Description: 
#	argin:  DevVarStringArray	"spec","array" e.g. "andy","longarray"
#	argout: DevVarLongArray	array of doubles
#------------------------------------------------------------------
	def GetDoubleRow(self, argin):
		print "In ", self.get_name(), "::GetDoubleRow()"
		#	Add your own code here
		_spec = argin[0]
		_array = argin[1]
		_row = int(argin[2])
		self.info_stream("get double row for spec session = %s , array = %s" % (_spec,_array))  
		_double_row = sps.getdatarow(_spec,_array,_row)
		return _double_row

#------------------------------------------------------------------
#	GetLongColumn command:
#
#	Description: 
#	argin:  DevVarStringArray	"spec","array" e.g. "andy","longarray"
#	argout: DevVarLongArray	array of long
#------------------------------------------------------------------
	def GetLongColumn(self, argin):
		print "In ", self.get_name(), "::GetLongColumn()"
		#	Add your own code here
		_spec = argin[0]
		_array = argin[1]
		_column = int(argin[2])
		self.info_stream("get double column for spec session = %s , array = %s" % (_spec,_array))  
		_long_column = sps.getdatacol(_spec,_array,_column)
		return _long_column

#------------------------------------------------------------------
#	GetDoubleColumn command:
#
#	Description: 
#	argin:  DevVarStringArray	"spec","array" e.g. "andy","longarray"
#	argout: DevVarLongArray	array of doubles
#------------------------------------------------------------------
	def GetDoubleColumn(self, argin):
		print "In ", self.get_name(), "::GetDoubleColumn()"
		#	Add your own code here
		_spec = argin[0]
		_array = argin[1]
		_column = int(argin[2])
		self.info_stream("get double column for spec session = %s , array = %s" % (_spec,_array))  
		_double_column = sps.getdatacol(_spec,_array,_column)
		return _double_column

#------------------------------------------------------------------
#	IsUpdated command:
#
#	Description: 
#	argin:  DevVarStringArray	"spec","array" e.g. "andy","longarray"
#	argout: DevLong	isupdated flag (1=updated, 0 not updated)
#------------------------------------------------------------------
	def IsUpdated(self, argin):
		print "In ", self.get_name(), "::GetDoubleArray()"
		#	Add your own code here
		_spec = argin[0]
		_array = argin[1]
		self.info_stream("get double array for spec session = %s , array = %s" % (_spec,_array))  
		_isupdated = sps.isupdated(_spec,_array)
		self.info_stream("isupdated flag = %d " % _isupdated)  
		return _isupdated


#==================================================================
#
#	TangoSpecSharedMemoryClass class definition
#
#==================================================================
class TangoSpecSharedMemoryClass(PyTango.DeviceClass):

	#	Class Properties
	class_property_list = {
		}


	#	Device Properties
	device_property_list = {
		}


	#	Command definitions
	cmd_list = {
		'GetLongArray':
			[[PyTango.DevVarStringArray, "spec,array e.g. andy,longarray"],
			[PyTango.DevVarLongArray, "array of longs"]],
		'GetDoubleArray':
			[[PyTango.DevVarStringArray, "spec,array e.g. andy,longarray"],
			[PyTango.DevVarDoubleArray, "array of doubles"]],
		'GetLongRow':
			[[PyTango.DevVarStringArray, "spec,array,row e.g. andy,longarray"],
			[PyTango.DevVarLongArray, "array of longs"]],
		'GetDoubleRow':
			[[PyTango.DevVarStringArray, "spec,array,row e.g. andy,longarray"],
			[PyTango.DevVarDoubleArray, "array of doubles"]],
		'GetLongColumn':
			[[PyTango.DevVarStringArray, "spec,array,column e.g. andy,longarray"],
			[PyTango.DevVarLongArray, "array of longs"]],
		'GetDoubleColumn':
			[[PyTango.DevVarStringArray, "spec,array,column e.g. andy,longarray"],
			[PyTango.DevVarDoubleArray, "array of doubles"]],
		'IsUpdated':
			[[PyTango.DevVarStringArray, "spec,array e.g. andy,longarray"],
			[PyTango.DevLong, "isupdated flag"]],
		}


	#	Attribute definitions
	attr_list = {
		}


#------------------------------------------------------------------
#	TangoSpecSharedMemoryClass Constructor
#------------------------------------------------------------------
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In TangoSpecSharedMemoryClass  constructor"

#==================================================================
#
#	TangoSpecSharedMemory class main method
#
#==================================================================
if __name__ == '__main__':
	try:
		py = PyTango.Util(sys.argv)
		py.add_TgClass(TangoSpecSharedMemoryClass,TangoSpecSharedMemory,'TangoSpecSharedMemory')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed,e:
		print '-------> Received a DevFailed exception:',e
	except Exception,e:
		print '-------> An unforeseen exception occured....',e
