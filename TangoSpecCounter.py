#!/usr/bin/env python
#	"$Name:  $";
#	"$Header:  $";
#=============================================================================
#
# file :        TangoSpecCounter.py
#
# description : Python source for the TangoSpecCounter and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                TangoSpecCounter are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys

import sys
import time
import string
import math
import thread
import numpy

from SpecClient.SpecCounter import *
from SpecClient.SpecVariable import *
from SpecClient.SpecClientError import SpecClientError
from SpecClient import SpecEventsDispatcher
from SpecClient import SpecConnectionsManager



#==================================================================
#   TangoSpecCounter Class Description:
#
#         A class to implement a SpecCounter as a Tango device. Spec will be accessed
#         via spec server usingg the SpecClient.
#
#==================================================================
# 	Device States Description:
#
#   DevState.ON :
#   DevState.MOVING :
#   DevState.FAULT :
#==================================================================


class TangoSpecCounter(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#	Device constructor
#------------------------------------------------------------------
	def __init__(self,cl, name):
		PyTango.Device_4Impl.__init__(self,cl,name)
		TangoSpecCounter.init_device(self)

#------------------------------------------------------------------
#	Device destructor
#------------------------------------------------------------------
	def delete_device(self):
		print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#	Device initialization
#------------------------------------------------------------------
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.ON)
		self.get_device_properties(self.get_device_class())
		self.spec = self.device_property_list['Spec'][2]
		print "property[spec] = " , self.spec
		self.counter = self.device_property_list['Counter'][2]
		print "property[counter] = " , self.counter
                #
                # Create a synchronous spec access to get the data
                #       
                try:
			self.spec_counter = SpecCounter(self.counter, self.spec)
			self.spec_connected = 1

                except SpecClientError, error:
			self.spec_connected = 0
                        print "Spec error : ", self.counter, self.spec, error

		#SpecEventsDispatcher.dispatch()
		print self.get_name(), "::init_device() exiting"


#------------------------------------------------------------------
#	Always excuted hook method
#------------------------------------------------------------------
	def always_executed_hook(self):
		#print "In ", self.get_name(), "::always_excuted_hook()"
		if self.spec_connected == 0:
			self.set_state(PyTango.DevState.FAULT)
			self.set_status("Counter in FAULT state because SPEC disconnected (hint: start the SPEC session)")
		else:
			self.set_state(PyTango.DevState.ON)
			self.set_status("Counter in ON")



#==================================================================
#
#	TangoSpecCounter read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#	Read Attribute Hardware
#------------------------------------------------------------------
	def read_attr_hardware(self,data):
		#print "In ", self.get_name(), "::read_attr_hardware()"
		dummy = 0



#------------------------------------------------------------------
#	Read Position attribute
#------------------------------------------------------------------
	def read_Value(self, attr):
		#print "In ", self.get_name(), "::read_Value()"
		
		#	Add your own code here
		
		self.value = self.spec_counter.getValue()
		attr.set_value(self.value)


#==================================================================
#
#	TangoSpecCounter command methods
#
#==================================================================

#------------------------------------------------------------------
#       CountCmd command:
#
#       Description: 
#       argin:  DevDouble       
#       argout: DevVoid       
#------------------------------------------------------------------
        def CountCmd(self, argin):
                print "In ", self.get_name(), "::CountCmd()",argin
                #       Add your own code here
                try:
			self.spec_counter.count(argin)
                except SpecClientError, error:
                        print "Spec error : ", self.spec, error

                return 

#==================================================================
#
#	TangoSpecCounterClass class definition
#
#==================================================================
class TangoSpecCounterClass(PyTango.DeviceClass):

	#	Class Properties
	class_property_list = {
		}


	#	Device Properties
	device_property_list = {
		'Spec':
			[PyTango.DevString,
			"Name of spec session e.g. host:spec",
			[ "lid112:andy" ] ],
		'Counter':
			[PyTango.DevString,
			"Spec mnemonic for counter",
			[ "mon" ] ],
		}


	#	Command definitions
        cmd_list = {
                'CountCmd':
                        [[PyTango.DevDouble, ""],
                        [PyTango.DevVoid, ""]],
                }


	#	Attribute definitions
	attr_list = {
		'Value':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ]],
		}

#------------------------------------------------------------------
#	_SpecEventDispatcherThread function
#------------------------------------------------------------------
	def _spec_event_dispatcher_thread(self):
		print 'Start _SpecEventDispatcherThread()'
		if SpecConnectionsManager._SpecConnectionsManagerInstance == None:
			print "_spec_event_dispatcher_thread(): create SpecConnectionsManager"
			spec_mngr = SpecConnectionsManager.SpecConnectionsManager(pollingThread=False)
			while True:
				SpecConnectionsManager._SpecConnectionsManagerInstance.poll()
			#SpecEventsDispatcher.dispatch()
				time.sleep(.1)
			
#------------------------------------------------------------------
#	TangoSpecCounterClass Constructor
#------------------------------------------------------------------
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In TangoSpecVariableClass  constructor"
		thread_args= self,
		thread.start_new_thread(TangoSpecCounterClass._spec_event_dispatcher_thread,thread_args)



#==================================================================
#
#	TangoSpecCounter class main method
#
#==================================================================
if __name__ == '__main__':
	try:
		py = PyTango.Util(sys.argv)
		py.add_TgClass(TangoSpecCounterClass,TangoSpecCounter,'TangoSpecCounter')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed,e:
		print '-------> Received a DevFailed exception:',e
	except Exception,e:
		print '-------> An unforeseen exception occured....',e
